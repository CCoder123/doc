得到脚本当前所在目录
get_cur_dir() {
	# Get the fully qualified path to the script
	case $0 in
    	/*)
        	SCRIPT="$0"
        	;;
    	*)   #默认匹配
        	PWD_DIR=$(pwd);
        	SCRIPT="${PWD_DIR}/$0"
        	;;
	esac

	# Resolve the true real path without any sym links.
	CHANGED=true
	while [ "X$CHANGED" != "X" ]
	do
    	# Change spaces to ":" so the tokens can be parsed.
    	SAFESCRIPT=`echo $SCRIPT | sed -e 's; ;:;g'`
    	
        # Get the real path to this script, resolving any symbolic links
    	TOKENS=`echo $SAFESCRIPT | sed -e 's;/; ;g'`
    	
        REALPATH=
    	for C in $TOKENS; do
        	# Change any ":" in the token back to a space.
        	C=`echo $C | sed -e 's;:; ;g'`
        	REALPATH="$REALPATH/$C"
        	# If REALPATH is a sym link, resolve it.  Loop for nested links.
        	while [ -h "$REALPATH" ] ; do
            	LS="`ls -ld "$REALPATH"`"
            	
                #expr string1 : "pattern"    expr 操作符是:  模式匹配
                LINK="`expr "$LS" : '.*-> \(.*\)$'`"
            	if expr "$LINK" : '/.*' > /dev/null; then
                	# LINK is absolute.
                	REALPATH="$LINK"
            	else
                	# LINK is relative.
                	REALPATH="`dirname "$REALPATH"`""/$LINK"
            	fi
        	done
    	done

    	if [ "$REALPATH" = "$SCRIPT" ]
    	then
        	CHANGED=""
    	else
        	SCRIPT="$REALPATH"
    	fi
	done
	# Change the current directory to the location of the script
	CUR_DIR=$(dirname "${REALPATH}")
}


检查是否是root用户
check_user() {
    if [ $(id -u) != "0" ]; then
        echo "You are not root user"
        exit 1
        fi
}

$# 是传给脚本的参数个数
$0 是脚本本身的名字
$1 是传递给该shell脚本的第一个参数
$2 是传递给该shell脚本的第二个参数
$@ 是传给脚本的所有参数的列表
$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个
$$ 是脚本运行的当前进程ID号
$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误


=~   模式匹配
check_os() {
	OS_VERSION=$(cat /etc/issue)
	OS_BIT=$(getconf LONG_BIT)
	#echo "$OS_VERSION, $OS_BIT bit..." 
	if [[ $OS_VERSION =~ "CentOS" ]]; then
		if [ $OS_BIT == 64 ]; then
			return 0
		else
			echo "Error: OS must be CentOS 64bit to run this script."
			exit 1
		fi
	else
		echo "Error: OS must be CentOS 64bit to run this script."
		exit 1
	fi
}

check_run() {
	ps -ef | grep -v 'grep' | grep redis-server
	if [ $? -eq 0 ]; then
		echo "Error: redis is running."
		exit 1
	fi
}

文件比较运算符
-e filename     如果 filename存在，则为真   [ -e /var/log/syslog ]
-d filename     如果 filename为目录，则为真     [ -d /tmp/mydir ]
-f filename     如果 filename为常规文件，则为真     [ -f /usr/bin/grep ]
-L filename     如果 filename为符号链接，则为真     [ -L /usr/bin/grep ]
-r filename     如果 filename可读，则为真   [ -r /var/log/syslog ]
-w filename     如果 filename可写，则为真   [ -w /var/mytmp.txt ]
-x filename     如果 filename可执行，则为真     [ -L /usr/bin/grep ]
-h filename     如果 filename文件存在并且是一个符号链接，则为真

filename1 -nt filename2  如果 filename1比 filename2新，则为真    
[ /tmp/install/etc/services -nt /etc/services ]
filename1 -ot filename2  如果 filename1比 filename2旧，则为真   
[ /boot/bzImage -ot arch/i386/boot/bzImage ]

字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）
-z string   如果 string长度为零，则为真     [ -z "$myvar" ]
-n string   如果 string长度非零，则为真     [ -n "$myvar" ]
string1= string2    如果 string1与 string2相同，则为真  [ "$myvar" = "one two three" ]
string1!= string2   如果 string1与 string2不同，则为真  [ "$myvar" != "one two three" ]

算术比较运算符
num1 -eq num2    等于    [ 3 -eq $mynum ]
num1 -ne num2    不等于  [ 3 -ne $mynum ]
num1 -lt num2    小于    [ 3 -lt $mynum ]
num1 -le num2    小于或等于  [ 3 -le $mynum ]
num1 -gt num2    大于    [ 3 -gt $mynum ]
num1 -ge num2    大于或等于  [ 3 -ge $mynum ]


set命令用于脚本调试。
set是把它下面的命令打印到屏幕
set -x 是开启 set +x是关闭 set -o是查看 (xtrace)，set去追踪一段代码的显示情况。
执行set -x后，对整个脚本有效。
针对一部分script，可以选择 set -x 和 set +x配套使用。比如在一个脚本里：
set -x            # activate debugging from here
w
set +x            # stop debugging from here])





